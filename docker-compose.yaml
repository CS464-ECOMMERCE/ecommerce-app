version: "3.3"

services:
  backend:
    build:
      context: ./backend
      dockerfile: ./docker/Dockerfile
    ports:
      - 8081:8080
    volumes:
      - ./testing.env:/app/secrets/.env
    
    env_file: ./testing.env
    depends_on:
      database:
        condition: service_healthy

  product:
    build:
      context: ./product
      dockerfile: ./docker/Dockerfile
    volumes:
      - ./testing.env:/app/secrets/.env
    env_file: ./testing.env
    depends_on:
      database:
        condition: service_healthy

  cart:
    build:
      context: ./cart
      dockerfile: ./docker/Dockerfile
    volumes:
       - ./testing.env:/app/secrets/.env
    environment:
      - REDIS_ADDR=redis:6379
      - REDIS_PASSWORD=redis_password
      - REDIS_DB=0
      - REDIS_DEFAULT_TTL=30m
      - GRPC_PORT=50051
      - HTTP_PORT=8080
    depends_on:
      redis:
        condition: service_healthy

  order:
    build:
      context: ./order
      dockerfile: ./docker/Dockerfile
    volumes:
       - ./testing.env:/app/secrets/.env
    depends_on:
      database:
        condition: service_healthy

  database:
    image: postgres:14.1-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - psql_data:/var/lib/postgresql/data
      - ./seed.sql:/docker-entrypoint-initdb.d/seed.sql
  adminer:
    image: adminer
    ports:
      - 8080:8080
    depends_on:
      - database
  minio:
    image: quay.io/minio/minio
    command: server /data --console-address ":9090"
    ports:
      - "9000:9000"
      - "9090:9090"
    restart: always
    volumes:
      - ./minio/data:/data
    environment:
      - MINIO_ROOT_USER=minio
      - MINIO_ROOT_PASSWORD=miniouser

  
  redis:
    image: "redis:alpine"
    command: redis-server --requirepass redis_password --maxmemory 100mb --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5


volumes:
  psql_data:
    # external: true
    # name: psql_data
  redis_data: